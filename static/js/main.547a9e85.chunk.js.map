{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["marked","setOptions","breaks","highlight","code","Prism","languages","javascript","App","props","state","markdown","placeholder","this","setState","className","class","id","style","width","height","marginLeft","marginRight","padding","display","value","onChange","e","updateMarkdown","target","backgroundColor","dangerouslySetInnerHTML","__html","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAgJAA,IAAOC,WAAW,CAChBC,QAAQ,EACRC,UAAW,SAAUC,GACnB,OAAOC,IAAMF,UAAUC,EAAMC,IAAMC,UAAUC,WAAY,iB,IAIvDC,E,kDACJ,WAAaC,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAUC,GAHK,E,kDAOnB,SAAeD,GACbE,KAAKC,SAAS,CAACH,e,oBAGjB,WAAS,IAAD,OAoBN,OACE,qBAAKI,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,QAAd,gCACF,sBAAKC,MAAM,MAAX,UACE,sBAAKA,MAAM,SAAX,UACE,oBAAID,UAAU,YAAd,4BACA,0BAAUE,GAAG,SAASC,MAzBf,CACfC,MAAO,QACPC,OAAQ,OACRC,WAAY,OACZC,YAAa,OACbC,QAAS,OACTC,QAAS,SAoBGC,MAAOZ,KAAKH,MAAMC,SAClBe,SAAY,SAACC,GACX,EAAKC,eAAeD,EAAEE,OAAOJ,aAIrC,sBAAKT,MAAM,SAAX,UACE,oBAAID,UAAU,YAAd,qBACA,qBAAKE,GAAG,UAAUC,MAzBV,CAChBC,MAAO,QACPC,OAAQ,OACRU,gBAAiB,UACjBT,WAAY,OACZC,YAAa,OACbC,QAAS,QAoBCQ,wBAAyB,CAAEC,OAAQhC,IAAOa,KAAKH,MAAMC,4B,GAjDnDsB,IAAMC,WA0DlBtB,EAAW,spCA8CFJ,ICnPA2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.547a9e85.chunk.js","sourcesContent":["/*import React from \"react\";\n//import Badge from \"react-bootstrap/Badge\";\n//npm install @material-ui/core\nimport Badge from \"@material-ui/core/Badge\";\nlet marked = require(\"marked\");\n\nexport default class App extends React.Component{\n  constructor (props){\n    super(props)\n    this.state = {\n      markdown: placeholder,\n    };\n  }\n\n  updateMarkdown(markdown){\n    this.setState({markdown});\n  }\n\n  render(){\n\n    var inputStyle = {\n      width: \"400px\",\n      height: \"80vh\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      padding: \"10px\"\n    }\n\n    var outputStyle = {\n      width: \"500px\",\n      height: \"80vh\",\n      backgroundColor: \"#DCDCDC\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      padding: \"10px\"\n    }\n\n    return(\n      <div className=\"App\">\n        <div className=\"container\">\n\n          <div className = \"row mt-4\">\n            <div className = \"col text-center\">\n              <h1>\n                <Badge className=\"text-align-center\" variant=\"light\">\n                  Markdown Previewer\n                </Badge>\n              </h1>\n            </div>\n          </div>\n\n          <div className=\"row mt-4\">\n\n            <div className=\"col-md-6\">\n              <div className=\"col text-center\">\n                <h4>\n                  <Badge className=\"text-align-center\" variant=\"secondary\">\n                    Markdown Input\n                  </Badge>\n                </h4>\n              </div>\n              <div className=\"mark-input\" style={inputStyle}>\n                <textarea className=\"input\" style={inputStyle}\n                value={this.state.markdown}\n                onChange = {(e)=>{\n                  this.updateMarkdown(e.target.value);\n                }}>\n                </textarea>\n              </div>\n            </div>\n\n            <div className=\"col-md-6\">\n              <div className=\"col text-center\">\n                <h4>\n                  <Badge className=\"text-align-center\" variant=\"secondary\">\n                    Preview\n                  </Badge>\n                </h4>\n              </div>\n              <div style = {outputStyle}\n              dangerouslySetInnerHTML={{ __html: marked(this.state.markdown)}}>\n              </div>\n            </div>\n\n          </div>\n\n        </div>\n\n      </div>\n  );}\n}\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n<img src=\"https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg\" width=\"200\"/>\n`;\n*/\n\nimport React from 'react';\nimport marked from 'marked';\nimport Prism from \"prismjs\";\nimport './App.css';\n\n// ALLOWS LINE BREAKS WITH RETURN BUTTON\nmarked.setOptions({\n  breaks: true,\n  highlight: function (code) {\n    return Prism.highlight(code, Prism.languages.javascript, 'javascript');\n  }\n});\n\nclass App extends React.Component{\n  constructor (props){\n    super(props)\n    this.state = {\n      markdown: placeholder,\n    };\n  }\n\n  updateMarkdown(markdown){\n    this.setState({markdown});\n  }\n\n  render(){\n\n    var inputStyle = {\n      width: \"500px\",\n      height: \"80vh\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      padding: \"10px\",\n      display: \"block\"\n    }\n\n    var outputStyle = {\n      width: \"500px\",\n      height: \"80vh\",\n      backgroundColor: \"#DCDCDC\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      padding: \"10px\"\n    }\n\n    return(\n      <div className=\"App\">\n        <div className=\"container\">\n            <h1 className=\"title\">Markdown Previewer</h1>\n          <div class=\"row\">\n            <div class=\"column\">\n              <h4 className=\"subHeader\">Markdown Input</h4>\n              <textarea id=\"editor\" style={inputStyle}\n                  value={this.state.markdown}\n                  onChange = {(e)=>{\n                    this.updateMarkdown(e.target.value);\n                  }}>\n              </textarea>\n            </div>\n            <div class=\"column\">\n              <h4 className=\"subHeader\">Preview</h4>\n              <div id=\"preview\" style={outputStyle}\n                dangerouslySetInnerHTML={{ __html: marked(this.state.markdown)}}>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n  );}\n}\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n\nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n\nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.org), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | -------------\nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbered lists too.\n1. Use just 1s if you want!\n1. And last but not least, let's not forget embedded images:\n\n![freeCodeCamp](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\n\n`;\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}